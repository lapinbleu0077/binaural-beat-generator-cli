searchState.loadedDescShard("convert_case", 0, "Converts to and from various cases.\nAcronyms are identified by two uppercase letters followed …\nAlternating case strings are delimited by spaces.  …\nAlternating patterns make each letter of each word …\nHow an identifier is split into words.\nCamel case strings are lowercase, but for every word …\nCamel patterns make the first word lowercase and the …\nCapital patterns makes the first letter of each word …\nDefines the type of casing a string can be.\nDescribes items that can be converted into a case.  This …\nCobol case strings are delimited by hyphens <code>-</code> and are all …\nConstant case strings are delimited by underscores <code>_</code> and …\nThe parameters for performing a case conversion.\nSplits where digit is followed by a lowercase letter.\nSplits where digit is followed by an uppercase letter.\nFlat case strings are all lowercase, with no delimiter. …\nSplits on <code>-</code>, consuming the character on segmentation.\nKebab case strings are delimited by hyphens <code>-</code> and are all …\nSplits where a lowercase letter is followed by a digit.\nSplits where a lowercase letter is followed by an …\nLowercase strings are delimited by spaces and all …\nLowercase patterns make all words lowercase.\nPascal case strings are lowercase, but for every word the …\nA pattern is how a set of words is mutated before joining …\nSplits on space, consuming the character on segmentation.\nSentence case strings are delimited by spaces. Only the …\nCapital patterns make the first word capitalized and the …\nSnake case strings are delimited by underscores <code>_</code> and are …\nHolds information about parsing before converting into a …\nTitle case strings are delimited by spaces. Only the …\nToggle case strings are delimited by spaces.  All …\nToggle patterns have the first letter of each word …\nTrain case strings are delimited by hyphens <code>-</code>.  All …\nSplits on <code>_</code>, consuming the character on segmentation.\nSplits where an uppercase letter is followed by a digit.\nSplits where an uppercase letter is followed by a …\nUppercase strings are delimited by spaces and all …\nUpper camel case is an alternative name for Pascal case.\nUpper flat case strings are all uppercase, with no …\nUpper kebab case is an alternative name for Cobol case.\nUpper snake case is an alternative name for constant case.\nUppercase patterns make all words uppercase.\nAdds a vector of boundaries to the list of boundaries.\nAdds a boundary to the list of boundaries.\nReturns a vector with all case enum variants in no …\nAn optional string passed to <code>condition</code> at runtime.  Used …\nReturns the boundaries used in the corresponding case.  …\nHow a string is segmented into words.\nA function that determines if this boundary is present at …\nConverts a string.\nThe default list of boundaries used when <code>Casing::to_case</code> …\nReturns a list of all boundaries that are identified …\nReturns the delimiter used in the corresponding case.  The …\nThe string used to join mutated words together.\nReturns a vector with all the cases that do not depend on …\nReturns the boundaries that are digits followed by letters.\nReturns the boundaries that involve digits. <code>LowerDigit</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart the case conversion by storing the boundaries …\nSets the boundaries to those associated with the provided …\nUses the boundaries associated with <code>case</code> for word …\nCreate a new boundary based on a delimiter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if <code>self</code> is of the given case.  This is done …\nThe length of the boundary.  This is the number of …\nReturns the boundaries that are letters followed by digits.\nGenerates a vector of new <code>String</code>s in the right pattern …\nA unique name used for comparison.\nCreates a new <code>Converter</code> with default fields.  This is the …\nReturns the pattern used in the corresponding case.  The …\nHow each word is mutated before joining.  In the case that …\nRemoves all the provided boundaries from the list of …\nRemoves a boundary from the list of boundaries if it …\nSets the delimeter to an empty string.\nSets the pattern field to <code>None</code>.  Where there is no …\nSets the boundaries to those provided.\nSets the delimeter.\nSets the pattern.\nSplit an identifier into a list of words using the list of …\nWhere the beginning of the boundary is.\nConvert the string into the given case.  It will reference …\nSet the pattern and delimiter to those associated with the …\nConsumes the <code>StateConverter</code> and returns the converted …\nCreates a <code>StateConverter</code> struct initialized with the …\nOverwrites boundaries for word segmentation with those …\nCreates a <code>StateConverter</code> struct initialized without the …\nRemoves any boundaries that were already initialized.  …")